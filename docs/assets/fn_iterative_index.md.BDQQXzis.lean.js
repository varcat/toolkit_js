import{_ as i,c as s,a3 as a,o as e}from"./chunks/framework.ohJJpums.js";const c=JSON.parse('{"title":"iterative(fn)","description":"","frontmatter":{},"headers":[],"relativePath":"fn/iterative/index.md","filePath":"src/functions/iterative/iterative.md","lastUpdated":1730947922000}'),n={name:"fn/iterative/index.md"};function l(h,t,r,p,d,k){return e(),s("div",null,t[0]||(t[0]=[a(`<h1 id="iterative-fn" tabindex="-1">iterative(fn) <a class="header-anchor" href="#iterative-fn" aria-label="Permalink to &quot;iterative(fn)&quot;">​</a></h1><p>将只支持单个参数的函数转变为可支持数组参数的函数</p><h2 id="入参" tabindex="-1">入参 <a class="header-anchor" href="#入参" aria-label="Permalink to &quot;入参&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">必填</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">fn</td><td style="text-align:left;">(arg) =&gt; any</td><td style="text-align:left;">是</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="返回" tabindex="-1">返回 <a class="header-anchor" href="#返回" aria-label="Permalink to &quot;返回&quot;">​</a></h2><p><code>(...arg) =&gt; any[]</code></p><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// isExist 只支持一个入参</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isExist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 支持数组入参</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isExists</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> iterative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isExist);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isExists</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {}]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果也将变为数组 [ false, true, true ]</span></span></code></pre></div>`,8)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
